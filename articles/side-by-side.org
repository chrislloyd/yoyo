* Yo-yo & Component - Side by Side

(or, 'Yo-yo for people already familiar with Component'!)

Recommended pre-requisites:

- [[https://github.com/james-henderson/yoyo][Yo-yo's README]] - for the rationale behind Yo-yo, 'getting started',
  and simple usage.

** Coming up:

- [[#making-components][Making components]]
- [[#using-a-component-as-a-dependency][Using a component as a dependency]]
- [[#serving-a-rest-api][Serving a REST API]]
- [[#wiring-it-all-up][Wiring it all up]]
- [[#yo-yocomponent-interoperability][Yo-yo / Component Interoperability]]
- [[#mockable-services][Mockable Services]]
- [[mocking-out-dependencies]['Mocking out' dependencies]]

Yo-yo is still pretty new, so I'd be really interested to hear your
thoughts on this article! I can be contacted through [[https://gitter.im/james-henderson/yoyo][Gitter]], [[https://twitter.com/jarohen][Twitter]],
Clojurians Slack, or e-mail (in my Github profile).

Incidentally, there's very little of the 'Yo-yo code' below that
actually refers to any functions/macros in Yo-yo - most of it is
vanilla Clojure (and can be REPL-driven/tested as such).

- I'll explicitly mark where we require a Yo-yo dependency, and
- I'll mark vanilla Clojure 'Yo-yo examples' as ~;; Yo-yo (λ)~

Similarly, I'll also say 'yoyo-based apps' a lot, because the Yo-yo
library really doesn't care how you write components, pass resources
around, structure your application, if/how you inject dependencies,
how you configure you application etc.  Fundamentally, Yo-yo cares
about running 'systems', whatever they may be, and that's it. This
article contains examples of how one /might/ (read: 'how I') go about
structuring such systems, but it's your call.

** Making components

First, let's look at a simple JDBC connection pool component. We're
going to be creating a component to manage the lifecycle of the
connection pool - starting it when the system starts, making it
available to the system, and stopping it when the system stops.

The big difference between Component and Yo-yo is that, in Component,
we implement the ~com.stuartsierra.component/Lifecycle~ protocol;
whereas, in yoyo-based apps, we write a function.

Let's cheat, and use [[https://commons.apache.org/proper/commons-dbcp/][Apache Commons DBCP]]:

#+BEGIN_SRC clojure
  ;; This function is common to both. Normally I'd inline this, but I
  ;; don't fancy writing it out twice :)

  (ns myapp.db-pool
    (:import [org.apache.commons.dbcp2 BasicDataSource]))

  (defn start-data-source! [{:keys [driver-class subprotocol host port username password db] :as db-config}]
    (doto (BasicDataSource.)
      (.setDriverClassName driver-class)
      (.setUrl (format "jdbc:%s://%s:%s/%s" subprotocol host port db))
      (.setUsername username)
      (.setPassword password)))

  ;; Yo-yo (λ)                                     ;; Component

                                                   (:require [com.stuartsierra.component :as c])

  (defn with-db-pool [db-config f]                 (defrecord DatabasePool []
    (let [pool (start-data-source! db-config)]       c/Lifecycle
      (try                                           (start [this]
        (f {:datasource pool})                         (assoc this
                                                         :pool (start-data-source! this)))
        (finally
          (.close pool)))))                          (stop [{:keys [pool] :as this}]
                                                       (when pool
                                                         (.close pool))

                                                       (dissoc this :pool)))
#+END_SRC

In the Yo-yo example, we're assuming that we're passed a function ~f~,
which accepts a DB connection pool, and returns when it's time to shut
the pool down. Because ~pool~ remains in scope, we don't have to worry
about storing it in the record.

This also makes testing your Yo-yo components a breeze :) :

#+BEGIN_SRC clojure
  ;; Yo-yo (λ)

  (:require [clojure.java.jdbc :as jdbc]
            [clojure.test :refer :all])

  (with-db-pool <db-config>
    (fn [db-pool]
      (jdbc/with-db-transaction [tx db-pool]
        (jdbc/db-do-prepared tx ...)

        (is (= 1 (count (jdbc/query tx ["..."]))))
        ;; what else would you like to test?

        )))
#+END_SRC

** Using a component as a dependency

Let's say we have a table of blogs, and we'd like to make a CRUD interface.

In yoyo-based apps, the CRUD functions might take a ~db-pool~ as part
of an options map. In Component, we'd probably do the same (albeit
taking in an ~DatabasePool~, instead).

#+BEGIN_SRC clojure
  (ns myapp.blogs
    (:require [clojure.java.jdbc :as jdbc]))

  ;; Yo-yo (λ)                                                    ;; Component

  (defn get-blogs [{:keys [db-pool]}]                             (defn get-blogs [db-pool-component]
    (jdbc/query db-pool                                             (jdbc/query (:pool db-pool-component)
                ["..."]))                                                       ["..."]))

  (defn create-blog! [{:keys [title content]} {:keys [db-pool]}]  (defn create-blog! [db-pool-component {:keys [title content]}]
    (jdbc/db-do-prepared db-pool                                    (jdbc/db-do-prepared (:pool db-pool-component)
                         "..."                                                           "..."
                         [title content]))                                               [title content]))

#+END_SRC

Testing-wise, again, we can test these really easily:

#+BEGIN_SRC clojure
  ;; Yo-yo (λ)                                  ;; Component

                                                (:require [com.stuartsierra.component :as c])

  (with-db-pool <db-config>                     (let [db-pool-component (-> (map->DatabasePool <db-config>)
    (fn [db-pool]                                                           c/start)]
      (create-blog! {...} {:db-pool db-pool})     (try
                                                    (create-blog! db-pool-component {...})
      (is (= (get-blogs {:db-pool db-pool})
             [{...}]))))                            (is (= (get-blogs db-pool-component)
                                                           [{...}]))

                                                    (finally
                                                      (c/stop db-pool-component))))

#+END_SRC

** Serving a REST API

Let's say we want to expose our blogs as a (skeleton) Compojure REST
API. In a yoyo-based system, a high-level component like this would
probably take an 'application map' to pass to lower level functions,
of the form

#+BEGIN_SRC clojure
  {:db-pool db-pool,
   :other-resource <...>,
   ...}
#+END_SRC

(This is arguably a Reader monad - while I have been experimenting
with using a Reader monad to pass this around, I haven't yet found a
Clojure-idiomatic way that I'm completely happy with - please let me
know! Safe to say, there's nothing in Yo-yo that would prevent
migrating to such a pattern)

In a Component system, we probably have two choices at this point:

1. If we're using a library to provide the web server Component, we'd
   probably have to create a Component that satisfies a
   'WebHandler'-like protocol - for example, we could implement JUXT's
   [[https://github.com/juxt/modular][Modular]] Ring module's ~WebRequestHandler~ protocol, in order to use
   its http-kit, or Aleph module, or [[https://github.com/james-henderson/phoenix][Phoenix's]] equivalents.
2. If we're writing the web server Component ourselves, we could
   probably use something closer to the Yo-yo
   implementation.

#+BEGIN_SRC clojure
  (ns myapp.handler
    (:require [bidi.ring :as br]
              [myapp.blogs :as b]
              [ring.util.response :refer [response status]]
              [ring.middleware.format :refer [wrap-restful-format]]))

  (def api-routes
    ["" {"/blogs" {:get ::get-blogs
                   :post ::create-blog!}}])

  ;; Yo-yo (λ)                                                          ;; Component (option 1)


                                                                        (:require [modular.ring :as mr])


  (defn api-handlers [app]                                              (defn api-handlers [db-pool-component]
    {::get-blogs (fn [req]                                                {::get-blogs (fn [req]
                   (response (b/get-blogs app)))                                         (response (b/get-blogs db-pool-component)))

     ::create-blog! (fn [{{:keys [title content]} :body-params}]           ::create-blog! (fn [{{:keys [title content]} :body-params}]
                      ;; TODO validation                                                    ;; TODO validation
                      (b/create-blog! {:title title                                         (b/create-blog! db-pool-component
                                       :content content}                                                    {:title title
                                      app)                                                                   :content content})

                      (-> (response :created)                                               (-> (response :created)
                          (status 201)))})                                                      (status 201)))})


                                                                        (defrecord WebHandler [db-pool-component]
                                                                          mr/WebRequestHandler
  (defn make-handler [app]                                                (request-handler [_]
    (-> (br/make-handler api-routes (api-handlers app))                     (-> (br/make-handler api-routes (api-handlers db-pool-component))
        (wrap-restful-format :formats [:transit-json :edn :json-kw])))          (wrap-restful-format :formats [:transit-json :edn :json-kw]))))
#+END_SRC

Under Component option 2, our web server Component would probably look
something like this:

#+BEGIN_SRC clojure
  (ns myapp.web-server
    (:require [myapp.handler :refer [make-handler]]
              [com.stuartsierra.component :as c]
              [aleph.http :as aleph]))

  ;; Component

  ;; Assuming we have referred something like:
  ;; (defn make-handler [db-pool-component]
  ;;   (-> (br/make-handler api-routes (api-handlers db-pool-component))
  ;;       (wrap-restful-format :formats [:transit-json :edn :json-kw])))

  (defrecord WebServer [db-pool-component]
    c/Lifecycle
    (start [_]
      (assoc this
        :server (http/start-server (make-handler db-pool-component)
                                   {:port ...})))

    (stop [{:keys [server] :as this}]
      (when server
        (.close server))

      (dissoc this :server)))
#+END_SRC

** Wiring it all up

Yo-yo doesn't have any notion of dependency injection (for better or
for worse!) - it's up to you! Fortunately, in practice, this doesn't
seem too onerous:

#+BEGIN_SRC clojure
  (ns myapp.main
    (:require [nomad :refer [read-config]]
              [clojure.java.io :as io]
              [myapp.db :as db]
              [myapp.handler :as h]))

  ;; Yo-yo                                                            ;; Component (option 1)

  (:require [yoyo :refer [ylet]]                                      (:require [com.stuartsierra.component :as c]
            [yoyo.http-kit :refer [with-webserver]])                            [phoenix.modules.aleph :refer [make-web-server]])

  (defn make-system [latch]                                           (defn make-system []
    (let [config (read-config (io/resource "..."))]                     (let [config (read-config (io/resource "..."))]
                                                                          (c/system-map
      (ylet [db-pool (db/with-db-pool (:db config))                         :db-pool-component (db/map->DatabaseComponent (:db config))

             :let [app {:db-pool db-pool}                                   :web-handler (-> (h/map->WebHandler)
                   handler (make-handler app)]                                               (c/using [:db-pool-component]))

             web-server (with-webserver {:handler handler                   :web-server (-> (make-web-server {:port ...})
                                         :port (:web-port config)})]                        (c/using [:web-handler])))))

        (latch))))

                                                                      (def system
                                                                        (make-system))

  (defn -main [& args]                                                (defn -main [& args]
    (yoyo/set-system-fn! 'myapp.main/make-system)                       (alter-var-root #'system c/start-system))
    (yoyo/start!))

#+END_SRC

** Yo-yo/Component Interoperability

You can use any existing Components in Yo-yo systems, and Yo-yo
components in Component-systems.

(These wrappers are also available in [[https://github.com/james-henderson/yoyo/tree/master/component][library form]])

#+BEGIN_SRC clojure
  (:require [com.stuartsierra.component :as c]
            [yoyo :as y]
            [yoyo.component :as yc])

  ;; Component in Yo-yo

  (yc/with-component (map->MyComponent {...})
    (fn [started-component]
      ...))

  (defn with-component [component f]
    ;; yc/with-component looks like this:
    (let [started-component (c/start component)]
      (try
        (f started-component)
        (finally
          (c/stop component)))))


  ;; Component system in Yo-yo

  (yc/with-component-system (c/system-map ...)
    (fn [started-system]
      ...))

  (defn with-component-system [system f]
    ;; yc/with-component-system looks like this:
    (let [started-system-map (c/start-system system)]
      (try
        (f started-system-map)
        (finally
          (c/stop-system started-system-map)))))


  ;; Yo-yo in Component

  (:require [myapp.db :as db])

  (defn make-db-pool-component []
    ;; see yoyo.component for YoyoComponent's full source
    (yc/->YoyoComponent (fn [latch]
                          (y/ylet [db-pool (with-db-pool {...})]
                            (latch)))))
#+END_SRC

** Mockable services

If you have a group of functions that rely on I/O, and don't want to
use the main implementation for testing purposes, you might want to
mock them out. To do this, we'd wrap those functions up in a
prototype.

(Just because Yo-yo itself is 'protocol-less', doesn't mean you can't
(or shouldn't) use protocols in yoyo-based apps!)

#+BEGIN_SRC clojure
  (ns myapp.blogs
    (:require [clojure.java.jdbc :as jdbc]))

  (defprotocol BlogRepository
    (get-blogs [_])
    (create-blog! [_ {:keys [title content]}]))

  ;; -- With a Lifecycle

  ;; Yo-yo (λ)                                                      ;; Component (λ)

  (defn with-blog-repository [{:keys [db-pool]} f]                  (defrecord Blogs [db-pool-component]
    (let [ ;; 'start' - might also inline 'blog-repo' if possible
          blog-repo (reify BlogRepository                             BlogRepository
                      (get-blogs [_]                                  (get-blogs [_]
                        (jdbc/query db-pool                             (jdbc/query (:pool db-pool-component)
                                    ["..."]))                                       ["..."]))

                      (create-blog! [_ {:keys [title content]}]       (create-blog! [_ {:keys [title content]}]
                        (jdbc/db-do-prepared db-pool                    (jdbc/db-do-prepared (:pool db-pool-component)
                                             "..."                                           "..."
                                             [title content])))]                             [title content])))


      (try                                                            c/Lifecycle
        (f blog-repo)                                                 (start [this]
                                                                        ...
        (finally                                                        (assoc this
                                                                          ...))
          ;; 'stop'
          ))))                                                        (stop [this]
                                                                        ...
                                                                        (dissoc this
                                                                          ...))

  ;; -- Without a Lifecycle

  ;; Yo-yo (λ)                                        ;; Component (λ)

  (defrecord Blogs [db-pool]                          (defrecord Blogs [db-pool-component]
    BlogRepository                                      BlogRepository
    (get-blogs [_]                                      (get-blogs [_]
      (jdbc/query ["..."]                                 (jdbc/query (:pool db-pool-component)
                  db-pool))                                           ["..."]))

    (create-blog! [_ {:keys [title content]}]           (create-blog! [_ {:keys [title content]}]
      (jdbc/db-do-prepared db-pool                        (jdbc/db-do-prepared (:pool db-pool-component)
                           "..."                                               "..."
                           [title content])))                                  [title content])))



  ;; Yo-yo (λ) - you can also use an anonymous implementation
  ;;   - we're not tied to records

  (defn make-blog-repository [{:keys [db-pool]}]
    (reify BlogRepository
      (get-blogs [_]
        (jdbc/query ["..."]
                    db-pool))

      (create-blog! [_ {:keys [title content]}]
        (jdbc/db-do-prepared db-pool
                             "..."
                             [title content]))))
#+END_SRC

We'd have to alter the web handler to accept the new service:

#+BEGIN_SRC clojure
  (ns myapp.handler
    (:require [bidi.ring :as br]
              [myapp.blogs :as b]
              [ring.util.response :refer [response status]]
              [ring.middleware.format :refer [wrap-restful-format]]))

  (def api-routes
    ["" {"/blogs" {:get ::get-blogs
                   :post ::create-blog!}}])

  ;; Yo-yo (λ)                                                           ;; Component (option 1)

                                                                         (:require [modular.ring :as mr])


  (defn api-handlers [{:keys [blog-repository] :as app}]                 (defn api-handlers [blog-repository]
    {::get-blogs (fn [req]                                                 {::get-blogs (fn [req]
                   (response (b/get-blogs blog-repository)))                              (response (b/get-blogs blog-repository)))

     ::create-blog! (fn [{{:keys [title content]} :body-params}]            ::create-blog! (fn [{{:keys [title content]} :body-params}]
                      ;; TODO validation                                                     ;; TODO validation
                      (b/create-blog! blog-repository                                        (b/create-blog! blog-repository
                                      {:title title                                                          {:title title
                                       :content content})                                                     :content content})

                      (-> (response :created)                                                (-> (response :created)
                          (status 201)))})                                                       (status 201)))})


                                                                         (defrecord WebHandler [blog-repository]
                                                                           mr/WebRequestHandler
  (defn make-handler [app]                                                 (request-handler [_]
    (-> (br/make-handler api-routes (api-handlers app))                      (-> (br/make-handler api-routes (api-handlers blog-repository))
        (wrap-restful-format :formats [:transit-json :edn :json-kw])))           (wrap-restful-format :formats [:transit-json :edn :json-kw]))))

#+END_SRC

We'd then alter the wiring up code to look like this:

#+BEGIN_SRC clojure
  (ns myapp.main
    (:require [nomad :refer [read-config]]
              [clojure.java.io :as io]
              [myapp.db :as db]
              [myapp.blogs :as b]
              [myapp.handler :as h]))

  ;; Yo-yo                                                                        ;; Component (option 1)

  (:require [yoyo :refer [ylet]]                                                  (:require [com.stuartsierra.component :as c]
            [yoyo.http-kit :refer [with-webserver]])                                        [phoenix.modules.aleph :refer [make-web-server]])

  (defn make-system [latch]                                                       (defn make-system []
    (let [config (read-config (io/resource "..."))]                                 (let [config (read-config (io/resource "..."))]
                                                                                      (c/system-map
      (ylet [db-pool (db/with-db-pool (:db config))                                     :db-pool-component (db/map->DatabaseComponent (:db config))

             :let [blog-repository (b/make-blog-repository {:db-pool db-pool})          :blog-repository (-> (b/map->BlogRepository {})
                                                                                                             (c/using [:db-pool-component]))
                   app {:db-pool db-pool
                        :blog-repository blog-repository}

                   handler (make-handler app)]                                          :web-handler (-> (h/map->WebHandler)
                                                                                                         (c/using [:blog-repository]))

             web-server (with-webserver {:handler handler                               :web-server (-> (make-web-server {:port ...})
                                         :port (:web-port config)})]                                    (c/using [:web-handler])))))

        (latch))))

                                                                                  (def system
                                                                                    (make-system))

  (defn -main [& args]                                                            (defn -main [& args]
    (yoyo/set-system-fn! 'myapp.main/make-system)                                   (alter-var-root #'system c/start-system))
    (yoyo/start!))
#+END_SRC

** 'Mocking out' dependencies

We could then test the handler (assuming it would have a lot more in
the way of validation) by completely stubbing out the database access
code. Thanks to [[https://github.com/juxt/bidi][Bidi]]'s decoupling of routes and handlers, we could test
the handlers directly:

#+BEGIN_SRC clojure
  (ns myapp.handler-test
    (:require [myapp.handler :refer [api-handlers]]
              [myapp.blogs :as b]
              [clojure.test :refer :all]))

  ;; Yo-yo (λ) / Component (λ)

  (let [mock-blog-repo (reify b/IBlogRepository
                         (create-blog! [_ {:keys [title content]}]
                           ;; test params
                           ;; return stubbed value/throw exception
                           ))

        req {:body-params {:title "..."
                           :content "..."}}

        handler (::create-blog! (api-handlers {:blog-repo mock-blog-repo}))

        resp (handler req)]

    ;; test resp
    )
#+END_SRC

We can also bring up the whole system, with a number of dependencies
mocked out. Here, we're using Clojure's ~with-redefs~ macro to swap
out the implementation.

#+BEGIN_SRC clojure
  (ns myapp.main-test
    (:require [myapp.main :as m]
              [clojure.string :as s]
              [clojure.test :refer :all]))

  ;; Yo-yo (λ)                                                                ;; Component

                                                                              (:require [com.stuartsierra.component :as c])

  (let [mock-blog-repository (reify b/BlogRepository                          (let [mock-blog-repository (reify b/BlogRepository
                               ...)]                                                                       ...)

    (with-redefs [b/make-blog-repository (constantly mock-blog-repository)]         test-system (assoc (m/make-system)
                                                                                                  :blog-repository mock-blog-repository)

      (m/make-system (fn []                                                         started-system (c/start-system test-system)]

                       ;; test the system here                                  ;; test the system here!
                       ))))
                                                                                (c/stop-system started-system))
#+END_SRC

To run our Yo-yo tests, we're re-using the fact that ~m/make-system~
starts the system, waits for the passed function to return, and then
stops the system. In normal operation, this would be 'waiting for the
system to stop', but we can just as well use it for 'waiting for our
tests to run'!

** Thoughts?

Thanks for reading this far - I'd be really interested to hear your
thoughts on the above! I can be contacted through [[https://gitter.im/james-henderson/yoyo][Gitter]], [[https://twitter.com/jarohen][Twitter]],
Clojurians Slack, or e-mail (in my Github profile).

If you've noticed any omissions/mistakes/etc, please file a PR :)

Cheers!

James
